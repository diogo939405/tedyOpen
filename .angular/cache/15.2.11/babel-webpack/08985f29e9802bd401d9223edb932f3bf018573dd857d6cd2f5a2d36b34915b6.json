{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Input, ContentChildren, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i1 from 'primeng/api';\nimport { TranslationKeys, PrimeTemplate, SharedModule } from 'primeng/api';\nimport * as i3 from 'primeng/button';\nimport { ButtonModule } from 'primeng/button';\nimport { ZIndexUtils } from 'primeng/utils';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\nfunction ConfirmPopup_div_0_i_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 8);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r2.confirmation.icon);\n    i0.ɵɵproperty(\"ngClass\", \"p-confirm-popup-icon\");\n  }\n}\nfunction ConfirmPopup_div_0_button_7_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\");\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(3);\n    i0.ɵɵclassMap(ctx_r5.confirmation.rejectIcon);\n  }\n}\nfunction ConfirmPopup_div_0_button_7_2_ng_template_0_Template(rf, ctx) {}\nfunction ConfirmPopup_div_0_button_7_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ConfirmPopup_div_0_button_7_2_ng_template_0_Template, 0, 0, \"ng-template\", null, 12, i0.ɵɵtemplateRefExtractor);\n  }\n}\nfunction ConfirmPopup_div_0_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function ConfirmPopup_div_0_button_7_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r9.reject());\n    });\n    i0.ɵɵtemplate(1, ConfirmPopup_div_0_button_7_i_1_Template, 1, 2, \"i\", 10);\n    i0.ɵɵtemplate(2, ConfirmPopup_div_0_button_7_2_Template, 2, 0, null, 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r3.confirmation.rejectButtonStyleClass || \"p-button-text\");\n    i0.ɵɵproperty(\"label\", ctx_r3.rejectButtonLabel)(\"ngClass\", \"p-confirm-popup-reject p-button-sm\");\n    i0.ɵɵattribute(\"aria-label\", ctx_r3.rejectButtonLabel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.confirmation.rejectIcon)(\"ngIfElse\", ctx_r3.rejecticon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.rejectIconTemplate);\n  }\n}\nfunction ConfirmPopup_div_0_button_8_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\");\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(3);\n    i0.ɵɵclassMap(ctx_r11.confirmation.acceptIcon);\n  }\n}\nfunction ConfirmPopup_div_0_button_8_2_ng_template_0_Template(rf, ctx) {}\nfunction ConfirmPopup_div_0_button_8_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ConfirmPopup_div_0_button_8_2_ng_template_0_Template, 0, 0, \"ng-template\", null, 13, i0.ɵɵtemplateRefExtractor);\n  }\n}\nfunction ConfirmPopup_div_0_button_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function ConfirmPopup_div_0_button_8_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.accept());\n    });\n    i0.ɵɵtemplate(1, ConfirmPopup_div_0_button_8_i_1_Template, 1, 2, \"i\", 10);\n    i0.ɵɵtemplate(2, ConfirmPopup_div_0_button_8_2_Template, 2, 0, null, 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r4.confirmation.acceptButtonStyleClass);\n    i0.ɵɵproperty(\"label\", ctx_r4.acceptButtonLabel)(\"ngClass\", \"p-confirm-popup-accept p-button-sm\");\n    i0.ɵɵattribute(\"aria-label\", ctx_r4.acceptButtonLabel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.confirmation.acceptIcon)(\"ngIfElse\", ctx_r4.accepticon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.acceptIconTemplate);\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    showTransitionParams: a0,\n    hideTransitionParams: a1\n  };\n};\nconst _c1 = function (a1) {\n  return {\n    value: \"open\",\n    params: a1\n  };\n};\nfunction ConfirmPopup_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵlistener(\"click\", function ConfirmPopup_div_0_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.onOverlayClick($event));\n    })(\"@animation.start\", function ConfirmPopup_div_0_Template_div_animation_animation_start_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.onAnimationStart($event));\n    })(\"@animation.done\", function ConfirmPopup_div_0_Template_div_animation_animation_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.onAnimationEnd($event));\n    });\n    i0.ɵɵelementStart(1, \"div\", 2, 3);\n    i0.ɵɵtemplate(3, ConfirmPopup_div_0_i_3_Template, 1, 3, \"i\", 4);\n    i0.ɵɵelementStart(4, \"span\", 5);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 6);\n    i0.ɵɵtemplate(7, ConfirmPopup_div_0_button_7_Template, 3, 8, \"button\", 7);\n    i0.ɵɵtemplate(8, ConfirmPopup_div_0_button_8_Template, 3, 8, \"button\", 7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r0.styleClass);\n    i0.ɵɵproperty(\"ngClass\", \"p-confirm-popup p-component\")(\"ngStyle\", ctx_r0.style)(\"@animation\", i0.ɵɵpureFunction1(12, _c1, i0.ɵɵpureFunction2(9, _c0, ctx_r0.showTransitionOptions, ctx_r0.hideTransitionOptions)));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.confirmation.icon);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.confirmation.message);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.confirmation.rejectVisible !== false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.confirmation.acceptVisible !== false);\n  }\n}\nlet ConfirmPopup = /*#__PURE__*/(() => {\n  class ConfirmPopup {\n    constructor(el, confirmationService, renderer, cd, config, overlayService, document) {\n      this.el = el;\n      this.confirmationService = confirmationService;\n      this.renderer = renderer;\n      this.cd = cd;\n      this.config = config;\n      this.overlayService = overlayService;\n      this.document = document;\n      this.defaultFocus = 'accept';\n      this.showTransitionOptions = '.12s cubic-bezier(0, 0, 0.2, 1)';\n      this.hideTransitionOptions = '.1s linear';\n      this.autoZIndex = true;\n      this.baseZIndex = 0;\n      this.window = this.document.defaultView;\n      this.subscription = this.confirmationService.requireConfirmation$.subscribe(confirmation => {\n        if (!confirmation) {\n          this.hide();\n          return;\n        }\n        if (confirmation.key === this.key) {\n          this.confirmation = confirmation;\n          if (this.confirmation.accept) {\n            this.confirmation.acceptEvent = new EventEmitter();\n            this.confirmation.acceptEvent.subscribe(this.confirmation.accept);\n          }\n          if (this.confirmation.reject) {\n            this.confirmation.rejectEvent = new EventEmitter();\n            this.confirmation.rejectEvent.subscribe(this.confirmation.reject);\n          }\n          this.visible = true;\n        }\n      });\n    }\n    get visible() {\n      return this._visible;\n    }\n    set visible(value) {\n      this._visible = value;\n      this.cd.markForCheck();\n    }\n    ngAfterContentInit() {\n      this.templates.forEach(item => {\n        switch (item.getType()) {\n          case 'rejecticon':\n            this.rejectIconTemplate = item.template;\n            break;\n          case 'accepticon':\n            this.acceptIconTemplate = item.template;\n            break;\n        }\n      });\n    }\n    onAnimationStart(event) {\n      if (event.toState === 'open') {\n        this.container = event.element;\n        this.renderer.appendChild(this.document.body, this.container);\n        this.align();\n        this.bindListeners();\n        const element = this.getElementToFocus();\n        if (element) {\n          element.focus();\n        }\n      }\n    }\n    onAnimationEnd(event) {\n      switch (event.toState) {\n        case 'void':\n          this.onContainerDestroy();\n          break;\n      }\n    }\n    getElementToFocus() {\n      switch (this.defaultFocus) {\n        case 'accept':\n          return DomHandler.findSingle(this.container, '.p-confirm-popup-accept');\n        case 'reject':\n          return DomHandler.findSingle(this.container, '.p-confirm-popup-reject');\n        case 'none':\n          return null;\n      }\n    }\n    align() {\n      if (this.autoZIndex) {\n        ZIndexUtils.set('overlay', this.container, this.config.zIndex.overlay);\n      }\n      DomHandler.absolutePosition(this.container, this.confirmation.target);\n      const containerOffset = DomHandler.getOffset(this.container);\n      const targetOffset = DomHandler.getOffset(this.confirmation.target);\n      let arrowLeft = 0;\n      if (containerOffset.left < targetOffset.left) {\n        arrowLeft = targetOffset.left - containerOffset.left;\n      }\n      this.container.style.setProperty('--overlayArrowLeft', `${arrowLeft}px`);\n      if (containerOffset.top < targetOffset.top) {\n        DomHandler.addClass(this.container, 'p-confirm-popup-flipped');\n      }\n    }\n    hide() {\n      this.visible = false;\n    }\n    accept() {\n      if (this.confirmation.acceptEvent) {\n        this.confirmation.acceptEvent.emit();\n      }\n      this.hide();\n    }\n    reject() {\n      if (this.confirmation.rejectEvent) {\n        this.confirmation.rejectEvent.emit();\n      }\n      this.hide();\n    }\n    onOverlayClick(event) {\n      this.overlayService.add({\n        originalEvent: event,\n        target: this.el.nativeElement\n      });\n    }\n    bindListeners() {\n      /*\n       * Called inside `setTimeout` to avoid listening to the click event that appears when `confirm` is first called(bubbling).\n       * Need wait when bubbling event up and hang the handler on the next tick.\n       * This is the case when eventTarget and confirmation.target do not match when the `confirm` method is called.\n       */\n      setTimeout(() => {\n        this.bindDocumentClickListener();\n        this.bindDocumentResizeListener();\n        this.bindScrollListener();\n      });\n    }\n    unbindListeners() {\n      this.unbindDocumentClickListener();\n      this.unbindDocumentResizeListener();\n      this.unbindScrollListener();\n    }\n    bindDocumentClickListener() {\n      if (!this.documentClickListener) {\n        let documentEvent = DomHandler.isIOS() ? 'touchstart' : 'click';\n        const documentTarget = this.el ? this.el.nativeElement.ownerDocument : this.document;\n        this.documentClickListener = this.renderer.listen(documentTarget, documentEvent, event => {\n          let targetElement = this.confirmation.target;\n          if (this.container !== event.target && !this.container.contains(event.target) && targetElement !== event.target && !targetElement.contains(event.target)) {\n            this.hide();\n          }\n        });\n      }\n    }\n    unbindDocumentClickListener() {\n      if (this.documentClickListener) {\n        this.documentClickListener();\n        this.documentClickListener = null;\n      }\n    }\n    onWindowResize() {\n      if (this.visible && !DomHandler.isTouchDevice()) {\n        this.hide();\n      }\n    }\n    bindDocumentResizeListener() {\n      if (!this.documentResizeListener) {\n        this.documentResizeListener = this.renderer.listen(this.window, 'resize', this.onWindowResize.bind(this));\n      }\n    }\n    unbindDocumentResizeListener() {\n      if (this.documentResizeListener) {\n        this.documentResizeListener();\n        this.documentResizeListener = null;\n      }\n    }\n    bindScrollListener() {\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.confirmation.target, () => {\n          if (this.visible) {\n            this.hide();\n          }\n        });\n      }\n      this.scrollHandler.bindScrollListener();\n    }\n    unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    }\n    unsubscribeConfirmationSubscriptions() {\n      if (this.confirmation) {\n        if (this.confirmation.acceptEvent) {\n          this.confirmation.acceptEvent.unsubscribe();\n        }\n        if (this.confirmation.rejectEvent) {\n          this.confirmation.rejectEvent.unsubscribe();\n        }\n      }\n    }\n    onContainerDestroy() {\n      this.unbindListeners();\n      this.unsubscribeConfirmationSubscriptions();\n      if (this.autoZIndex) {\n        ZIndexUtils.clear(this.container);\n      }\n      this.confirmation = null;\n      this.container = null;\n    }\n    restoreAppend() {\n      if (this.container) {\n        this.renderer.removeChild(this.document.body, this.container);\n      }\n      this.onContainerDestroy();\n    }\n    get acceptButtonLabel() {\n      return this.confirmation.acceptLabel || this.config.getTranslation(TranslationKeys.ACCEPT);\n    }\n    get rejectButtonLabel() {\n      return this.confirmation.rejectLabel || this.config.getTranslation(TranslationKeys.REJECT);\n    }\n    ngOnDestroy() {\n      this.restoreAppend();\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n  }\n  ConfirmPopup.ɵfac = function ConfirmPopup_Factory(t) {\n    return new (t || ConfirmPopup)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.ConfirmationService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.PrimeNGConfig), i0.ɵɵdirectiveInject(i1.OverlayService), i0.ɵɵdirectiveInject(DOCUMENT));\n  };\n  ConfirmPopup.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ConfirmPopup,\n    selectors: [[\"p-confirmPopup\"]],\n    contentQueries: function ConfirmPopup_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      key: \"key\",\n      defaultFocus: \"defaultFocus\",\n      showTransitionOptions: \"showTransitionOptions\",\n      hideTransitionOptions: \"hideTransitionOptions\",\n      autoZIndex: \"autoZIndex\",\n      baseZIndex: \"baseZIndex\",\n      style: \"style\",\n      styleClass: \"styleClass\",\n      visible: \"visible\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"ngClass\", \"ngStyle\", \"class\", \"click\", 4, \"ngIf\"], [3, \"ngClass\", \"ngStyle\", \"click\"], [1, \"p-confirm-popup-content\"], [\"content\", \"\"], [3, \"ngClass\", \"class\", 4, \"ngIf\"], [1, \"p-confirm-popup-message\"], [1, \"p-confirm-popup-footer\"], [\"type\", \"button\", \"pButton\", \"\", 3, \"label\", \"ngClass\", \"class\", \"click\", 4, \"ngIf\"], [3, \"ngClass\"], [\"type\", \"button\", \"pButton\", \"\", 3, \"label\", \"ngClass\", \"click\"], [3, \"class\", 4, \"ngIf\", \"ngIfElse\"], [4, \"ngTemplateOutlet\"], [\"rejecticon\", \"\"], [\"accepticon\", \"\"]],\n    template: function ConfirmPopup_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ConfirmPopup_div_0_Template, 9, 14, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.visible);\n      }\n    },\n    dependencies: [i2.NgClass, i2.NgIf, i2.NgTemplateOutlet, i2.NgStyle, i3.ButtonDirective],\n    styles: [\".p-confirm-popup{position:absolute;margin-top:10px;top:0;left:0}.p-confirm-popup-flipped{margin-top:0;margin-bottom:10px}.p-confirm-popup:after,.p-confirm-popup:before{bottom:100%;left:calc(var(--overlayArrowLeft, 0) + 1.25rem);content:\\\" \\\";height:0;width:0;position:absolute;pointer-events:none}.p-confirm-popup:after{border-width:8px;margin-left:-8px}.p-confirm-popup:before{border-width:10px;margin-left:-10px}.p-confirm-popup-flipped:after,.p-confirm-popup-flipped:before{bottom:auto;top:100%}.p-confirm-popup.p-confirm-popup-flipped:after{border-bottom-color:transparent}.p-confirm-popup.p-confirm-popup-flipped:before{border-bottom-color:transparent}.p-confirm-popup .p-confirm-popup-content{display:flex;align-items:center}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('animation', [state('void', style({\n        transform: 'scaleY(0.8)',\n        opacity: 0\n      })), state('open', style({\n        transform: 'translateY(0)',\n        opacity: 1\n      })), transition('void => open', animate('{{showTransitionParams}}')), transition('open => void', animate('{{hideTransitionParams}}'))])]\n    },\n    changeDetection: 0\n  });\n  return ConfirmPopup;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ConfirmPopupModule = /*#__PURE__*/(() => {\n  class ConfirmPopupModule {}\n  ConfirmPopupModule.ɵfac = function ConfirmPopupModule_Factory(t) {\n    return new (t || ConfirmPopupModule)();\n  };\n  ConfirmPopupModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ConfirmPopupModule\n  });\n  ConfirmPopupModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, ButtonModule, SharedModule, SharedModule]\n  });\n  return ConfirmPopupModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ConfirmPopup, ConfirmPopupModule };\n//# sourceMappingURL=primeng-confirmpopup.mjs.map\n//# sourceMappingURL=primeng-confirmpopup.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}